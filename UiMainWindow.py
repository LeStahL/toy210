# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.11.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 599)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.welcomeTab = QtWidgets.QWidget()
        self.welcomeTab.setObjectName("welcomeTab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.welcomeTab)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.textEdit = QtWidgets.QTextEdit(self.welcomeTab)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_2.addWidget(self.textEdit)
        self.tabWidget.addTab(self.welcomeTab, "")
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuNew = QtWidgets.QMenu(self.menuFile)
        self.menuNew.setObjectName("menuNew")
        self.menuExport = QtWidgets.QMenu(self.menuFile)
        self.menuExport.setObjectName("menuExport")
        self.menu_Recent = QtWidgets.QMenu(self.menuFile)
        self.menu_Recent.setObjectName("menu_Recent")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuShader = QtWidgets.QMenu(self.menubar)
        self.menuShader.setObjectName("menuShader")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_2.setEnabled(True)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        self.toolBar_3 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_3.setEnabled(True)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.toolBar_3.setFont(font)
        self.toolBar_3.setStyleSheet("color: rgb(0, 0, 0);")
        self.toolBar_3.setObjectName("toolBar_3")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_3)
        self.toolBar_4 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_4.setEnabled(True)
        self.toolBar_4.setObjectName("toolBar_4")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_4)
        self.actionGFX_Shader = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-new")
        self.actionGFX_Shader.setIcon(icon)
        self.actionGFX_Shader.setObjectName("actionGFX_Shader")
        self.actionSFX_Shader = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-new")
        self.actionSFX_Shader.setIcon(icon)
        self.actionSFX_Shader.setObjectName("actionSFX_Shader")
        self.actionSequence = QtWidgets.QAction(MainWindow)
        self.actionSequence.setEnabled(False)
        self.actionSequence.setObjectName("actionSequence")
        self.action2D_Stack = QtWidgets.QAction(MainWindow)
        self.action2D_Stack.setEnabled(False)
        self.action2D_Stack.setObjectName("action2D_Stack")
        self.action3D_Stack = QtWidgets.QAction(MainWindow)
        self.action3D_Stack.setEnabled(False)
        self.action3D_Stack.setObjectName("action3D_Stack")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-open")
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.actionSave.setIcon(icon)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-save-as")
        self.actionSave_As.setIcon(icon)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave_all = QtWidgets.QAction(MainWindow)
        self.actionSave_all.setObjectName("actionSave_all")
        self.actionScreenshot = QtWidgets.QAction(MainWindow)
        self.actionScreenshot.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("camera")
        self.actionScreenshot.setIcon(icon)
        self.actionScreenshot.setObjectName("actionScreenshot")
        self.actionStream = QtWidgets.QAction(MainWindow)
        self.actionStream.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("audio-x-generic")
        self.actionStream.setIcon(icon)
        self.actionStream.setObjectName("actionStream")
        self.actionVideo = QtWidgets.QAction(MainWindow)
        self.actionVideo.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("applications-multimedia")
        self.actionVideo.setIcon(icon)
        self.actionVideo.setObjectName("actionVideo")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("window-close")
        self.actionQuit.setIcon(icon)
        self.actionQuit.setObjectName("actionQuit")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        self.actionUndo.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-undo")
        self.actionUndo.setIcon(icon)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(MainWindow)
        self.actionRedo.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-redo")
        self.actionRedo.setIcon(icon)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCut = QtWidgets.QAction(MainWindow)
        self.actionCut.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-cut")
        self.actionCut.setIcon(icon)
        self.actionCut.setObjectName("actionCut")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-copy")
        self.actionCopy.setIcon(icon)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-paste")
        self.actionPaste.setIcon(icon)
        self.actionPaste.setObjectName("actionPaste")
        self.actionDelete = QtWidgets.QAction(MainWindow)
        self.actionDelete.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-delete")
        self.actionDelete.setIcon(icon)
        self.actionDelete.setObjectName("actionDelete")
        self.actionSelect_all = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-select-all")
        self.actionSelect_all.setIcon(icon)
        self.actionSelect_all.setObjectName("actionSelect_all")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("preferences-system")
        self.actionPreferences.setIcon(icon)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionAbout_Toy210 = QtWidgets.QAction(MainWindow)
        self.actionAbout_Toy210.setObjectName("actionAbout_Toy210")
        self.actionAbout_Team210 = QtWidgets.QAction(MainWindow)
        self.actionAbout_Team210.setObjectName("actionAbout_Team210")
        self.actionPlay = QtWidgets.QAction(MainWindow)
        self.actionPlay.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("media-playback-start")
        self.actionPlay.setIcon(icon)
        self.actionPlay.setObjectName("actionPlay")
        self.actionReset = QtWidgets.QAction(MainWindow)
        self.actionReset.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("media-skip-backward")
        self.actionReset.setIcon(icon)
        self.actionReset.setObjectName("actionReset")
        self.actionTime = QtWidgets.QAction(MainWindow)
        self.actionTime.setEnabled(False)
        self.actionTime.setObjectName("actionTime")
        self.actionSeek = QtWidgets.QAction(MainWindow)
        self.actionSeek.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("media-seek-forward")
        self.actionSeek.setIcon(icon)
        self.actionSeek.setObjectName("actionSeek")
        self.actionFPS_0 = QtWidgets.QAction(MainWindow)
        self.actionFPS_0.setObjectName("actionFPS_0")
        self.actionCompile = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("applications-graphics")
        self.actionCompile.setIcon(icon)
        self.actionCompile.setObjectName("actionCompile")
        self.actionNone = QtWidgets.QAction(MainWindow)
        self.actionNone.setEnabled(False)
        self.actionNone.setObjectName("actionNone")
        self.menuNew.addAction(self.actionGFX_Shader)
        self.menuNew.addAction(self.actionSFX_Shader)
        self.menuNew.addAction(self.actionSequence)
        self.menuNew.addAction(self.action2D_Stack)
        self.menuNew.addAction(self.action3D_Stack)
        self.menuExport.addAction(self.actionScreenshot)
        self.menuExport.addAction(self.actionVideo)
        self.menuExport.addAction(self.actionStream)
        self.menu_Recent.addAction(self.actionNone)
        self.menuFile.addAction(self.menuNew.menuAction())
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.menu_Recent.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionSave_all)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuExport.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addAction(self.actionDelete)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSelect_all)
        self.menuSettings.addAction(self.actionPreferences)
        self.menuHelp.addAction(self.actionAbout_Toy210)
        self.menuHelp.addAction(self.actionAbout_Team210)
        self.menuShader.addAction(self.actionCompile)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuShader.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionGFX_Shader)
        self.toolBar.addAction(self.actionSFX_Shader)
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addAction(self.actionSave)
        self.toolBar_2.addAction(self.actionUndo)
        self.toolBar_2.addAction(self.actionRedo)
        self.toolBar_2.addAction(self.actionCut)
        self.toolBar_2.addAction(self.actionCopy)
        self.toolBar_2.addAction(self.actionPaste)
        self.toolBar_2.addAction(self.actionDelete)
        self.toolBar_3.addAction(self.actionPlay)
        self.toolBar_3.addAction(self.actionReset)
        self.toolBar_3.addAction(self.actionTime)
        self.toolBar_3.addAction(self.actionFPS_0)
        self.toolBar_3.addAction(self.actionSeek)
        self.toolBar_4.addAction(self.actionScreenshot)
        self.toolBar_4.addAction(self.actionStream)
        self.toolBar_4.addAction(self.actionVideo)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.actionGFX_Shader.triggered.connect(MainWindow.newGFX)
        self.actionSFX_Shader.triggered.connect(MainWindow.newSFX)
        self.tabWidget.currentChanged['int'].connect(MainWindow.tabSwitched)
        self.actionPlay.triggered.connect(MainWindow.pause)
        self.actionSeek.triggered.connect(MainWindow.forward)
        self.actionQuit.triggered.connect(MainWindow.quit)
        self.actionReset.triggered.connect(MainWindow.reset)
        self.tabWidget.tabCloseRequested['int'].connect(MainWindow.closeRequested)
        self.actionCopy.triggered.connect(MainWindow.copy)
        self.actionCompile.triggered.connect(MainWindow.compile)
        self.actionCut.triggered.connect(MainWindow.cut)
        self.actionDelete.triggered.connect(MainWindow.delete)
        self.actionPaste.triggered.connect(MainWindow.paste)
        self.actionRedo.triggered.connect(MainWindow.redo)
        self.actionSelect_all.triggered.connect(MainWindow.selectAll)
        self.actionUndo.triggered.connect(MainWindow.undo)
        self.actionOpen.triggered.connect(MainWindow.openFile)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow - No FX"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Cantarell\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600; color:#4e9a06;\">Toy210</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Team210 demo tool. Create awesome demo art with less effort.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Find it on <a href=\"https://www.github.com/lestahl/toy210\"><span style=\" text-decoration: underline; color:#4e9a06;\">GitHub</span></a>.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contributors: <a href=\"https://github.com/lestahl\"><span style=\" text-decoration: underline; color:#4e9a06;\">NR4</span></a>, <a href=\"https://github.com/stadelmaier\"><span style=\" text-decoration: underline; color:#4e9a06;\">MX</span></a></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600; color:#4e9a06;\">Team210</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">We are some people that are all in some way connected to the <a href=\"https://www.z10.info\"><span style=\" text-decoration: underline; color:#4e9a06;\">Z10</span></a> Karlsruhe. We like demos, and we make our own. This is the tool that we wrote to make this process more automated.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Find us on <a href=\"https://demozoo.org/groups/76968/\"><span style=\" text-decoration: underline; color:#4e9a06;\">Demozoo</span></a></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Recent work: <a href=\"https://www.pouet.net/prod.php?which=77876\"><span style=\" text-decoration: underline; color:#4e9a06;\">Eternal Darkness @ Evoke 2k18</span></a></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Members: <a href=\"https://demozoo.org/sceners/76970/\"><span style=\" text-decoration: underline; color:#4e9a06;\">NR4</span></a> (Code, GFX), <a href=\"https://demozoo.org/sceners/76971/\"><span style=\" text-decoration: underline; color:#4e9a06;\">QM</span></a> (Code, SFX), MIC (Hardware Support)</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.welcomeTab), _translate("MainWindow", "Welcome"))
        self.menuFile.setTitle(_translate("MainWindow", "Fi&le"))
        self.menuNew.setTitle(_translate("MainWindow", "&New"))
        self.menuExport.setTitle(_translate("MainWindow", "&Export"))
        self.menu_Recent.setTitle(_translate("MainWindow", "&Recent"))
        self.menuEdit.setTitle(_translate("MainWindow", "E&dit"))
        self.menuSettings.setTitle(_translate("MainWindow", "Setti&ngs"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuShader.setTitle(_translate("MainWindow", "Shader"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.toolBar_3.setWindowTitle(_translate("MainWindow", "toolBar_3"))
        self.toolBar_4.setWindowTitle(_translate("MainWindow", "toolBar_4"))
        self.actionGFX_Shader.setText(_translate("MainWindow", "&GFX Shader"))
        self.actionGFX_Shader.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSFX_Shader.setText(_translate("MainWindow", "&SFX Shader"))
        self.actionSFX_Shader.setShortcut(_translate("MainWindow", "Alt+N"))
        self.actionSequence.setText(_translate("MainWindow", "S&equence"))
        self.action2D_Stack.setText(_translate("MainWindow", "&2D Stack"))
        self.action3D_Stack.setText(_translate("MainWindow", "&3D Stack"))
        self.actionOpen.setText(_translate("MainWindow", "&Open..."))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave.setText(_translate("MainWindow", "&Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_As.setText(_translate("MainWindow", "Sa&ve As..."))
        self.actionSave_As.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionSave_all.setText(_translate("MainWindow", "Save a&ll"))
        self.actionScreenshot.setText(_translate("MainWindow", "&Screenshot..."))
        self.actionScreenshot.setShortcut(_translate("MainWindow", "F12"))
        self.actionStream.setText(_translate("MainWindow", "St&ream..."))
        self.actionStream.setShortcut(_translate("MainWindow", "F11"))
        self.actionVideo.setText(_translate("MainWindow", "&Video..."))
        self.actionVideo.setShortcut(_translate("MainWindow", "F10"))
        self.actionClose.setText(_translate("MainWindow", "&Close"))
        self.actionClose.setShortcut(_translate("MainWindow", "Ctrl+W"))
        self.actionQuit.setText(_translate("MainWindow", "&Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionUndo.setText(_translate("MainWindow", "&Undo"))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.actionRedo.setText(_translate("MainWindow", "&Redo"))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+Shift+Z"))
        self.actionCut.setText(_translate("MainWindow", "&Cut"))
        self.actionCut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionCopy.setText(_translate("MainWindow", "C&opy"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "&Paste"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionDelete.setText(_translate("MainWindow", "&Delete"))
        self.actionDelete.setShortcut(_translate("MainWindow", "Del"))
        self.actionSelect_all.setText(_translate("MainWindow", "&Select all"))
        self.actionSelect_all.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionPreferences.setText(_translate("MainWindow", "&Preferences..."))
        self.actionAbout_Toy210.setText(_translate("MainWindow", "&About Toy210..."))
        self.actionAbout_Team210.setText(_translate("MainWindow", "A&bout Team210..."))
        self.actionPlay.setText(_translate("MainWindow", "Play"))
        self.actionPlay.setShortcut(_translate("MainWindow", "Ctrl+Space"))
        self.actionReset.setText(_translate("MainWindow", "Reset"))
        self.actionReset.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionTime.setText(_translate("MainWindow", "0:00:000"))
        self.actionSeek.setText(_translate("MainWindow", "Seek"))
        self.actionFPS_0.setText(_translate("MainWindow", "FPS: 0"))
        self.actionCompile.setText(_translate("MainWindow", "&Compile"))
        self.actionCompile.setShortcut(_translate("MainWindow", "F5"))
        self.actionNone.setText(_translate("MainWindow", "None"))

